import { FsPath } from './fs-path';
/**
 * Class representing a TypeScript file with its dependencies.
 * If an import cannot be resolved, it doesn't throw an error
 * but is added to unresolvableImports.
 *
 * It is up to the consumer, e.g. ESLinter, to decide if that
 * should cause an error or not.
 */
export default class UnassignedFileInfo {
    #private;
    path: FsPath;
    imports: UnassignedFileInfo[];
    constructor(path: FsPath, imports?: UnassignedFileInfo[]);
    addUnresolvableImport(importCommand: string): void;
    isUnresolvableImport(importCommand: string): boolean;
    hasUnresolvableImports(): boolean;
    addImport(importedFileInfo: UnassignedFileInfo, rawImport: string): void;
    getRawImportForImportedFileInfo(path: FsPath): string;
}
type NestedArray = (string | NestedArray)[];
/**
 * utility function generate a FileInfo Tree for testing purposes
 * @param path
 * @param imports
 */
export declare const buildFileInfo: (path: string, imports?: NestedArray) => UnassignedFileInfo;
export {};
