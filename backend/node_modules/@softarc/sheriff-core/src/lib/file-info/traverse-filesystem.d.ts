import UnassignedFileInfo from './unassigned-file-info';
import * as ts from 'typescript';
import { TsData, TsPaths } from './ts-data';
import { FsPath } from './fs-path';
export type ResolveFn = (moduleName: string) => ReturnType<typeof ts.resolveModuleName>;
/**
 * This function generates the FileInfo tree.
 * It starts with the entry TypeScript file (in Angular main.ts) and follows
 * all the imports.
 *
 * It does not follow an import when it is an external library, i.e. comes from
 * node_modules or is already part of the tree.
 *
 * To improve the testability, we use abstraction whenever access to the
 * filesystem happens. In case the abstraction does not emulate the original's
 * behaviour, "strange bugs" might occur. Look out for them.
 *
 * fixPathSeparators is necessary to replace the static '/' path separator
 * with the one from the OS.
 *
 * @param fsPath Filename to traverse from
 * @param fileInfoDict Dictionary of traversed files to catch circularity
 * @param tsData
 * @param runOnce traverse only once. needed for ESLint mode
 * @param fileContent if passed, is used instead the content of @fsPath.
 * necessary for unsaved files inESLint
 */
declare const traverseFilesystem: (fsPath: FsPath, fileInfoDict: Map<FsPath, UnassignedFileInfo>, tsData: TsData, runOnce?: boolean, fileContent?: string) => UnassignedFileInfo;
export declare function resolvePotentialTsPath(moduleName: string, tsPaths: TsPaths, resolveFn: ResolveFn, filename: string): FsPath | undefined;
export default traverseFilesystem;
