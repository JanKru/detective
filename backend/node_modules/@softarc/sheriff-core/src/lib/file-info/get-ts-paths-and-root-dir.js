"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTsPathsAndRootDir = void 0;
const getFs_1 = __importDefault(require("../fs/getFs"));
const ts = __importStar(require("typescript"));
const fs_path_1 = require("./fs-path");
const user_error_1 = require("../error/user-error");
/**
 * Retrieves the paths variable from a tsconfig and also traverses through
 * potential parent configs.
 *
 * If there are wildcards, the wildcard will be removed from their path value.
 * This is necessary to keep up the FsPath type
 *
 * @param tsConfigPath path of the tsconfig.json
 */
const getTsPathsAndRootDir = (tsConfigPath) => {
    var _a, _b;
    const fs = (0, getFs_1.default)();
    let currentTsConfigPath = tsConfigPath;
    let currentTsConfigDir = fs.getParent(currentTsConfigPath);
    const paths = {};
    while (currentTsConfigPath) {
        const configRawContent = fs.readFile(currentTsConfigPath);
        const configContent = ts.readConfigFile(currentTsConfigPath, () => configRawContent);
        const config = configContent.config;
        const baseUrl = (_a = configContent.config.compilerOptions.baseUrl) !== null && _a !== void 0 ? _a : './';
        const newPaths = (_b = config.compilerOptions.paths) !== null && _b !== void 0 ? _b : {};
        currentTsConfigDir = fs.getParent(currentTsConfigPath);
        for (const [key, [value]] of Object.entries(newPaths)) {
            const valueForFsPath = value.endsWith('/*') ? value.slice(0, -2) : value;
            const potentialFilename = fs.join(currentTsConfigDir, baseUrl, valueForFsPath);
            if (fs.exists(potentialFilename)) {
                paths[key] = (0, fs_path_1.toFsPath)(potentialFilename);
            }
            else if (!potentialFilename.endsWith('.ts') &&
                fs.exists(potentialFilename + '.ts')) {
                paths[key] = (0, fs_path_1.toFsPath)(potentialFilename + '.ts');
            }
            else {
                throw new user_error_1.InvalidPathError(key, value);
            }
        }
        if (config.extends) {
            currentTsConfigPath = (0, fs_path_1.toFsPath)(fs.join(fs.getParent(currentTsConfigPath), config.extends));
        }
        else {
            break;
        }
    }
    return { paths, rootDir: currentTsConfigDir };
};
exports.getTsPathsAndRootDir = getTsPathsAndRootDir;
//# sourceMappingURL=get-ts-paths-and-root-dir.js.map