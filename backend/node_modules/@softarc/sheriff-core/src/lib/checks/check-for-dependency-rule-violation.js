"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForDependencyRuleViolation = checkForDependencyRuleViolation;
const fs_path_1 = require("../file-info/fs-path");
const calc_tags_for_module_1 = require("../tags/calc-tags-for-module");
const is_dependency_allowed_1 = require("./is-dependency-allowed");
function checkForDependencyRuleViolation(fsPath, { config, getFileInfo, rootDir, modules }) {
    const violations = [];
    const modulePaths = modules.map((module) => module.path);
    if (config.isConfigFileMissing) {
        return [];
    }
    const assignedFileInfo = getFileInfo(fsPath);
    const importedModulePathsWithRawImport = assignedFileInfo.imports
        // skip deep imports
        .filter((importedFi) => modulePaths.includes(importedFi.path))
        .map((fileInfo) => [
        fileInfo.moduleInfo.directory,
        assignedFileInfo.getRawImportForImportedFileInfo(fileInfo.path),
    ]);
    const fromModule = (0, fs_path_1.toFsPath)(assignedFileInfo.moduleInfo.directory);
    const fromTags = (0, calc_tags_for_module_1.calcTagsForModule)(fromModule, rootDir, config.tagging, config.autoTagging);
    for (const [importedModulePath, rawImport,] of importedModulePathsWithRawImport) {
        const toTags = (0, calc_tags_for_module_1.calcTagsForModule)((0, fs_path_1.toFsPath)(importedModulePath), rootDir, config.tagging, config.autoTagging);
        for (const toTag of toTags) {
            if (!(0, is_dependency_allowed_1.isDependencyAllowed)(fromTags, toTag, config.depRules, {
                fromModulePath: fromModule,
                toModulePath: (0, fs_path_1.toFsPath)(importedModulePath),
                fromFilePath: fsPath,
                toFilePath: (0, fs_path_1.toFsPath)(importedModulePath),
            })) {
                violations.push({
                    rawImport,
                    fromModulePath: fromModule,
                    toModulePath: (0, fs_path_1.toFsPath)(importedModulePath),
                    fromTags,
                    toTag,
                });
                break;
            }
        }
    }
    return violations;
}
//# sourceMappingURL=check-for-dependency-rule-violation.js.map