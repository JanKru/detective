"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForDeepImports = checkForDeepImports;
/**
 * verifies if an existing file has deep imports which are forbidden.
 * Unresolvable imports are skipped.
 *
 * It is up to the caller to decide.
 */
function checkForDeepImports(fsPath, { rootDir, config, modules, getFileInfo }) {
    const deepImports = [];
    const assignedFileInfo = getFileInfo(fsPath);
    const isRootAndExcluded = createIsRootAndExcluded(rootDir, config);
    const isModuleIndex = (fsPath) => modules.map((module) => module.path).includes(fsPath);
    for (const importedFileInfo of assignedFileInfo.imports) {
        if (!isModuleIndex(importedFileInfo.path) &&
            !isRootAndExcluded(importedFileInfo.moduleInfo.path) &&
            importedFileInfo.moduleInfo !== assignedFileInfo.moduleInfo) {
            deepImports.push(assignedFileInfo.getRawImportForImportedFileInfo(importedFileInfo.path));
        }
    }
    return deepImports;
}
/**
 * creates a function which allows a deep import, if
 * `excludeRoot` in the config is `true` and the
 * importedModulePath is the root module.
 */
const createIsRootAndExcluded = (rootDir, config) => {
    let excludeRoot = false;
    if (config === undefined) {
        excludeRoot = false;
    }
    else {
        excludeRoot = Boolean(config.excludeRoot);
    }
    return (importedModulePath) => excludeRoot && importedModulePath === rootDir;
};
//# sourceMappingURL=check-for-deep-imports.js.map