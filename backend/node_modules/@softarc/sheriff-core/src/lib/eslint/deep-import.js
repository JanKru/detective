"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasDeepImport = void 0;
const fs_path_1 = require("../file-info/fs-path");
const init_1 = require("../main/init");
const check_for_deep_imports_1 = require("../checks/check-for-deep-imports");
/**
 * This is the adapter for the ESLint plugin
 * This file needs to store the deep imports in a
 * cache because ESLint requests for every import
 * separately.
 *
 * We need both variables in order to distinguish
 * if we have an existing cache.
 * In case `cache` is empty we can't say if that
 * is because we never or run or because there no
 * deep imports.
 */
let cache = [];
let cachedFileInfo;
const hasDeepImport = (filename, importCommand, isFirstRun, fileContent) => {
    if (isFirstRun) {
        cache = [];
        cachedFileInfo = undefined;
    }
    if (!cachedFileInfo) {
        const fsPath = (0, fs_path_1.toFsPath)(filename);
        const projectInfo = (0, init_1.init)(fsPath, {
            traverse: false,
            entryFileContent: fileContent,
        });
        cachedFileInfo = projectInfo.fileInfo;
        cache = (0, check_for_deep_imports_1.checkForDeepImports)(fsPath, projectInfo);
    }
    if (cachedFileInfo.isUnresolvableImport(importCommand)) {
        return `import ${importCommand} cannot be resolved`;
    }
    return cache.includes(importCommand)
        ? "Deep import is not allowed. Use the module's index.ts or path."
        : '';
};
exports.hasDeepImport = hasDeepImport;
//# sourceMappingURL=deep-import.js.map