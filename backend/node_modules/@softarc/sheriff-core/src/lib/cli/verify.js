"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = verify;
const check_for_deep_imports_1 = require("../checks/check-for-deep-imports");
const traverse_file_info_1 = require("../modules/traverse-file-info");
const check_for_dependency_rule_violation_1 = require("../checks/check-for-dependency-rule-violation");
const getFs_1 = __importDefault(require("../fs/getFs"));
const cli_1 = require("./cli");
const get_entry_from_cli_or_config_1 = require("./internal/get-entry-from-cli-or-config");
function verify(args) {
    let deepImportsCount = 0;
    let dependencyRulesCount = 0;
    let filesCount = 0;
    let hasError = false;
    const validationsMap = {};
    const fs = (0, getFs_1.default)();
    const projectInfo = (0, get_entry_from_cli_or_config_1.getEntryFromCliOrConfig)(args[0]);
    for (const { fileInfo } of (0, traverse_file_info_1.traverseFileInfo)(projectInfo.fileInfo)) {
        const deepImports = (0, check_for_deep_imports_1.checkForDeepImports)(fileInfo.path, projectInfo);
        const dependencyRuleViolations = (0, check_for_dependency_rule_violation_1.checkForDependencyRuleViolation)(fileInfo.path, projectInfo);
        if (deepImports.length > 0 || dependencyRuleViolations.length > 0) {
            hasError = true;
            filesCount++;
            deepImportsCount += deepImports.length;
            dependencyRulesCount += dependencyRuleViolations.length;
            const dependencyRules = dependencyRuleViolations.map((violation) => `from tags ${violation.fromTags.join(',')} to ${violation.toTag}`);
            validationsMap[fs.relativeTo(fs.cwd(), fileInfo.path)] = {
                deepImports,
                dependencyRules,
            };
        }
    }
    cli_1.cli.log('');
    cli_1.cli.log(cli_1.cli.bold('Verification Report'));
    if (hasError) {
        cli_1.cli.log('');
        cli_1.cli.log('Issues found:');
        cli_1.cli.log(`  Total Invalid Files: ${filesCount}`);
        cli_1.cli.log(`  Total Deep Imports: ${deepImportsCount}`);
        cli_1.cli.log(`  Total Dependency Rule Violations: ${dependencyRulesCount}`);
        cli_1.cli.log('----------------------------------');
        cli_1.cli.log('');
    }
    else {
        cli_1.cli.log('');
        cli_1.cli.log('\u001b[32mNo issues found. Well done!\u001b[0m');
        cli_1.cli.endProcessOk();
    }
    for (const [file, { deepImports, dependencyRules }] of Object.entries(validationsMap)) {
        cli_1.cli.log('|-- ' + file);
        if (deepImports.length > 0) {
            cli_1.cli.log('|   |-- Deep Imports');
            deepImports.forEach((deepImport) => {
                cli_1.cli.log('|   |   |-- ' + deepImport);
            });
        }
        if (dependencyRules.length > 0) {
            cli_1.cli.log('|   |-- Dependency Rule Violations');
            dependencyRules.forEach((dependencyRule) => {
                cli_1.cli.log('|   |   |-- ' + dependencyRule);
            });
        }
    }
    cli_1.cli.endProcessError();
}
//# sourceMappingURL=verify.js.map